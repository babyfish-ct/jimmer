package org.babyfish.jimmer.sql.ddl.dialect;

import org.babyfish.jimmer.sql.EnumType;
import org.babyfish.jimmer.sql.ddl.DatabaseVersion;
import org.babyfish.jimmer.sql.dialect.PostgresDialect;

import java.util.UUID;

import static java.sql.Types.*;

/**
 * @author honhimW
 */

public class PostgresDDLDialect extends DefaultDDLDialect {

    public PostgresDDLDialect() {
        this(null);
    }

    public PostgresDDLDialect(final DatabaseVersion version) {
        super(new PostgresDialect(), version);
    }

    @Override
    public String getIdentityColumnString(int type) {
        return "generated by default as identity";
    }

    @Override
    public String columnType(int jdbcType, Long length, Integer precision, Integer scale) {
        length = getLength(jdbcType, length);
        precision = getPrecision(jdbcType, precision);
        scale = getScale(jdbcType, scale);
        switch (jdbcType) {
            case TINYINT:
                // no tinyint, not even in Postgres 11
                return "smallint";
            // there are no nchar/nvarchar types in Postgres
            case NCHAR:
                return columnType(CHAR, length, precision, scale);
            case NVARCHAR:
                return columnType(VARCHAR, length, precision, scale);
            case BLOB:
            case CLOB:
            case NCLOB:
                // use oid as the blob/clob type on Postgres because
                // the JDBC driver doesn't allow using bytea/text via
                // LOB APIs
                return "oid";
            case FLOAT:
                return "float4";
            case SQLXML:
                return "xml";
            // use bytea as the "long" binary type (that there is no
            // real VARBINARY type in Postgres, so we always use this)
            case BINARY:
            case VARBINARY:
                return "bytea";
            default:
                return super.columnType(jdbcType, length, precision, scale);
        }
    }

    @Override
    public String resolveSqlType(Class<?> type, EnumType.Strategy strategy) {
        if (type == UUID.class) {
            return "uuid";
        }
        return super.resolveSqlType(type, strategy);
    }

    @Override
    public String getCascadeConstraintsString() {
        return "cascade";
    }

    @Override
    public boolean supportsIfExistsAfterAlterTable() {
        return true;
    }

}
