package org.babyfish.jimmer.sql.ddl.dialect;

import org.babyfish.jimmer.sql.ddl.DDLUtils;
import org.babyfish.jimmer.sql.ddl.DatabaseVersion;
import org.babyfish.jimmer.sql.dialect.OracleDialect;

import static java.sql.Types.*;

/**
 * @author honhimW
 */

public class OracleDDLDialect extends DefaultDDLDialect {

    public OracleDDLDialect() {
        this(null);
    }

    public OracleDDLDialect(final DatabaseVersion version) {
        super(new OracleDialect(), version);
    }

    @Override
    public String columnType(int jdbcType, Long length, Integer precision, Integer scale) {
        length = getLength(jdbcType, length);
        precision = getPrecision(jdbcType, precision);
        scale = getScale(jdbcType, scale);
        switch (jdbcType) {
            case BOOLEAN: {
                if (isSameOrAfter(23)) {
                    return super.columnType(jdbcType, length, precision, scale);
                } else {
                    return "number(1,0)";
                }
            }
            case TINYINT:
                return "number(3,0)";
            case SMALLINT:
                return "number(5,0)";
            case INTEGER:
                return "number(10,0)";
            case BIGINT:
                return "number(19,0)";
            case REAL:
                // Oracle's 'real' type is actually double precision
                return "float(24)";
            case DOUBLE:
                // Oracle's 'double precision' means float(126), and
                // we never need 126 bits (38 decimal digits)
                return "float(53)";
            case NUMERIC:
            case DECIMAL:
                // Note that 38 is the maximum precision Oracle supports
                return DDLUtils.replace("number($p,$s)", null, precision, scale);
            case DATE:
                return "date";
            case TIME:
                return DDLUtils.replace("timestamp($p)", null, precision, null);
            // the only difference between date and timestamp
            // on Oracle is that date has no fractional seconds
            case TIME_WITH_TIMEZONE:
                return DDLUtils.replace("timestamp($p) with time zone", null, precision, null);
            case VARCHAR:
                return DDLUtils.replace("varchar2($l char)", length, null, null);
            case NVARCHAR:
                return DDLUtils.replace("nvarchar2($l)", length, null, null);
            case BINARY:
            case VARBINARY:
                return DDLUtils.replace("raw($l)", length, null, null);

            case SQLXML:
                return "SYS.XMLTYPE";

            default:
                return super.columnType(jdbcType, length, precision, scale);
        }
    }

    @Override
    public String getIdentityColumnString(int type) {
        return "generated by default as identity";
    }

    @Override
    public boolean supportsIfExistsBeforeTableName() {
        return isSameOrAfter(23);
    }

    @Override
    public String getCascadeConstraintsString() {
        return "cascade constraints";
    }

    @Override
    public boolean supportsIfExistsAfterAlterTable() {
        return isSameOrAfter(23);
    }

    @Override
    public boolean supportsIfExistsBeforeConstraintName() {
        return false;
    }

    @Override
    public boolean supportsIfExistsAfterDropSequence() {
        return isSameOrAfter(23);
    }
}
